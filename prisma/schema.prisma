// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           String        @id @default(cuid())
  street       String
  street2      String?
  city         String?
  state        String?
  postcode     String?
  country      String
  user         User?
  organisation Organisation?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  company        String?
  abn            String?
  type           UserType         @default(Client)
  hashedPassword String
  salt           String
  address        Address?         @relation(fields: [addressId], references: [id])
  addressId      String?          @unique
  profile        Profile?
  organisation   Organisation?    @relation(fields: [organisationId], references: [id])
  organisationId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobApplication JobApplication[]
}

enum UserType {
  Client
  Talent
}

model Organisation {
  id        String   @id @default(cuid())
  name      String
  address   Address  @relation(fields: [addressId], references: [id])
  addressId String   @unique
  clients   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  bio            String?
  skills         String[]
  availableHours Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Skill {
  id        String     @id @default(cuid())
  name      String
  jobSkills JobSkill[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Job {
  id              String           @id @default(cuid())
  title           String
  description     String
  notes           String?
  candidateNo     Int              @default(1)
  plannedRate     Int
  showRate        Boolean          @default(false)
  status          String           @default("inquiring")
  startDate       DateTime
  endDate         DateTime?
  plannedHours    Int              @default(40)
  jobSkills       JobSkill[]
  jobApplications JobApplication[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model JobSkill {
  id          String   @id @default(cuid())
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       String
  skill       Skill    @relation(fields: [skillId], references: [id])
  skillId     String
  level       Int
  isMandatory Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JobApplication {
  id           String   @id @default(cuid())
  job          Job      @relation(fields: [jobId], references: [id])
  jobId        String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  status       String   @default("draft")
  notes        String?
  requiredRate Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
